const sleep = (milliseconds) => {
  return new Promise(resolve => setTimeout(resolve, milliseconds))
}

var edge_dist = 1;

var pq = [];

//function min_pop()  {
//  let temp = [["", Infinity]];
//  for (let i = 0; i < pq.length; i++)  {
//    if (pq[i][1] < temp[1])  {
//      temp = pq[i];
//    }
//  }
//  return temp;
//}

function min_pop()  {
  let check = Infinity;
  let min, pos;
  console.log("this is inside", pq[0].value);
  for (let i = 0; i < pq.length; i++)  {
//    alert(pq[i].value);
    if (pq[i].value < check)  {
      pos = i;
      check = pq[pos].value;
    }
  }
  min = pq.splice(i, i);
  console.log("removind", min);
  return min;
}


async function Dijkstra(Board, value) {
//  var tr = bo;
//  var tc = 0;
 // source = Board.start;

function get_neighbour(node)  {
  var n_ar = [];
  console.log("this ?", node);
  if (node.row + 1 < Board.row && Board.nodeArray[node.row + 1][node.col].visited != true)  {
    n_ar.push(Board.nodeArray[node.row + 1][node.col])
  }
  if (node.col + 1 < Board.col && Board.nodeArray[node.row][node.col + 1].visited != true)  {
    n_ar.push(Board.nodeArray[node.row][node.col + 1])
  }
  if (node.row - 1 > 0 && Board.nodeArray[node.row - 1][node.col].visited != true) {
    n_ar.push(Board.nodeArray[node.row - 1][node.col])
  }
  if (node.row - 1 > 0 && Board.nodeArray[node.row][node.col - 1].visited != true)  {
    n_ar.push(Board.nodeArray[node.row][node.col - 1])
  }
  return n_ar;
}

  var u, v;
  let destination = Board.end;
  let current_node = Board.start;
  Board.start.value = 0;
  pq.push(current_node);
    console.log(pq);
return;
  while (pq.length != 0)  {
    u = min_pop();
    console.log("this after popping", u);
   let n_arr = get_neighbour(u);
    console.log("neighbour", n_arr);
    for (v of n_arr)  {
      await sleep(400);
      document.getElementById(v.row + "-" + v.col).style.backgroundColor="blue"
      let alt = u.value + edge_dist;
      if (alt < v.value)  {
          console.log(v.row, v.col, v.value, alt);
          v.value = alt;
          v.pred = u; // not sure
          pq.push(v);
          console.log("pushed", v);
        }
        u.visited = true;
      }
    }
}

export default Dijkstra;
